#include <iostream>
#include <windows.h> 
#include <locale>
#include <conio.h>
using namespace std;

// enumeration - перечисление
enum KeyCodes { ENTER = 13, ESCAPE = 27, LEFT = 75, RIGHT = 77, UP = 72, DOWN = 80, SPACEBAR = 32 };
enum Colors { DARKGREEN = 2, RED = 12, YELLOW = 14, BLUE = 9 };
enum Objects { HALL, WALL, COIN, ENEMY };

int main()
{
	
	int coins = 0;
	int health = 5;
	const int chall_coins = 40;

	system("title Лабиринт");
	srand(time(0));
	

	HANDLE h = GetStdHandle(STD_OUTPUT_HANDLE);

	// скрыть стандартный мигающий курсор
	CONSOLE_CURSOR_INFO info;
	info.bVisible = false;
	info.dwSize = 100;
	SetConsoleCursorInfo(h, &info);

	const int WIDTH = 50;
	const int HEIGHT = 15;
	int location[HEIGHT][WIDTH] = {};

	// генерация локации
	for (int y = 0; y < HEIGHT; y++)
	{
		for (int x = 0; x < WIDTH; x++)
		{
			location[y][x] = rand() % 4; // 0 1 2 3

			if (x == 0 || y == 0 || x == WIDTH - 1 || y == HEIGHT - 1)
				location[y][x] = WALL;

			if (x == 0 && y == 2 || x == WIDTH - 1 && y == HEIGHT - 3)
				location[y][x] = HALL;

			if (location[y][x] == ENEMY)
			{
				int prob = rand() % 10;
				if (prob != 0)
					location[y][x] = HALL;
			}
		}
	}

	// показ локации
	for (int y = 0; y < HEIGHT; y++)
	{
		for (int x = 0; x < WIDTH; x++)
		{
			switch (location[y][x])
			{
			case HALL:
				cout << " ";
				break;
			case WALL:
				SetConsoleTextAttribute(h, DARKGREEN);
				cout << (char)177;
				break;
			case COIN:
				SetConsoleTextAttribute(h, YELLOW);
				cout << (char)15;
				break;
			case ENEMY:
				SetConsoleTextAttribute(h, RED);
				cout << (char)1;
				break;
			default:
				cout << location[y][x];
				break;
			}
		}
		cout << "\n";
	}

	COORD position;
	position.X = 1;
	position.Y = 2;
	SetConsoleCursorPosition(h, position);
	SetConsoleTextAttribute(h, BLUE);
	cout << (char)1;

	
	SetConsoleCursorPosition(h, { 0, HEIGHT });
	SetConsoleTextAttribute(h, YELLOW);
	cout << "Coins: " << coins << "/" << chall_coins << "   ";
	SetConsoleCursorPosition(h, { 20, HEIGHT });
	SetConsoleTextAttribute(h, RED);
	cout << "Health: " << health << "   ";

	while (true)
	{
		int code = _getch();
		if (code == 224)
			code = _getch();

		// стирание ГГ в старой позиции
		SetConsoleCursorPosition(h, position);
		SetConsoleTextAttribute(h, BLUE);
		cout << " ";

		switch (code)
		{
		case ENTER:
			break;
		case SPACEBAR:
			break;
		case ESCAPE:
			return 0;
		case RIGHT:
			if (location[position.Y][position.X + 1] != WALL)
				position.X++;
			break;
		case LEFT:
			if (position.X > 0 && location[position.Y][position.X - 1] != WALL)
				position.X--;
			break;
		case UP:
			if (location[position.Y - 1][position.X] != WALL)
				position.Y--;
			break;
		case DOWN:
			if (location[position.Y + 1][position.X] != WALL)
				position.Y++;
			break;
		default:
			cout << code << "\n";
			break;
		}

		// показ ГГ в новой позиции
		SetConsoleCursorPosition(h, position);
		SetConsoleTextAttribute(h, BLUE);
		cout << (char)1;

		// взаимодействие ГГ с монетами
		if (location[position.Y][position.X] == COIN)
		{
			coins++;
			location[position.Y][position.X] = HALL; 
			SetConsoleCursorPosition(h, { 0, HEIGHT });
			SetConsoleTextAttribute(h, YELLOW);
			cout << "Coins: " << coins << "/" << chall_coins << "   ";

			if (coins >= chall_coins) {
				SetConsoleCursorPosition(h, { 0, HEIGHT + 1 });
				SetConsoleTextAttribute(h, YELLOW);
				cout << "You win!";
			}
		}

		if (location[position.Y][position.X] == ENEMY)
		{
			health--;
			location[position.Y][position.X] = HALL;
			SetConsoleCursorPosition(h, { 20, HEIGHT });
			SetConsoleTextAttribute(h, RED);
			cout << "Health: " << health << "   ";

			if (health <= 0)
			{
				SetConsoleCursorPosition(h, { 0, HEIGHT + 1 });
				SetConsoleTextAttribute(h, RED);
				cout << "Game Over!";
			}
		}
	}
}
